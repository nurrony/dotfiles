#!/usr/bin/env bash
# Bash wrappers for docker run commands
export DOCKER_REPO_PREFIX=jess

#
# Helper Functions
#
dcleanup(){
  docker container prune --force 2>/dev/null
  docker volume prune --force 2>/dev/null
  # docker network prune --force 2>/dev/null
  docker images --all --force 2>/dev/null
}

del_stopped(){
  local name=$1
  local state
  state=$(docker inspect --format "{{.State.Running}}" "$name" 2>/dev/null)

  if [[ "$state" == "false" ]]; then
    docker rm "$name"
  fi
}

ctr-registry-up() {
  local state=$(docker inspect --format "{{.State.Running}}" registry 2>/dev/null)
   if [[ "$state" == "true" ]] || [[ "$state" != "" ]]; then
        docker rm -f registry
    fi
  docker-compose -f $DEV_ZONE/storage/k8s-clusters/registry/docker-compose.yml up -d 2>/dev/null
  echo 'registry started...'
}

ctr-rgistry-down() {
  docker-compose -f $DEV_ZONE/storage/k8s-clusters/registry/docker-compose.yml down 2>/dev/null
  echo 'registry is down'
}


relies_on(){
  for container in "$@"; do
    local state
    state=$(docker inspect --format "{{.State.Running}}" "$container" 2>/dev/null)

    if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
      echo "$container is not running, starting it for you."
      $container
    fi
  done
}

nginx_proxy() {
  del_stopped nginx_proxy
  local state=$(docker inspect --format "{{.State.Running}}" nginx_proxy 2>/dev/null)

  if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
    docker run -it -d \
      --volume /var/run/docker.sock:/tmp/docker.sock:ro \
      --volume ${DEV_ZONE}/storage/nginx/vhost.d:/etc/nginx/vhost.d:ro \
      --volume ${DEV_ZONE}/storage/nginx/certs:/etc/nginx/certs:ro \
      --volume ${DEV_ZONE}/storage/nginx/conf.d/custom_settings.conf:/etc/nginx/conf.d/custom_settings.conf:ro \
      --publish 80:80 \
      --publish 443:443 \
      --net ronsvpn \
      --name nginx_proxy \
      nginxproxy/nginx-proxy:alpine 2>/dev/null
  else
    echo 'proxy is already running'
  fi
}

portainer() {
  relies_on nginx_proxy
  del_stopped portainer
  local state=$(docker inspect --format "{{.State.Running}}" portainer 2>/dev/null)

  if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
    echo "portainer server is not running, starting it for you."
    docker run -it -d \
      --volume /var/run/docker.sock:/var/run/docker.sock:ro \
      --volume ${DEV_ZONE}/storage/portainer:/data \
      --env VIRTUAL_HOST=portainer.nmrony.localhost \
      --expose 9000 \
      --net ronsvpn \
      --name portainer \
      portainer/portainer 2>/dev/null
  else
    echo 'portainer is already running'
  fi
}

# creates an nginx config for a local route
nginx_config() {
  server=$1
  route=$2

cat >${DEV_ZONE}/storage/nginx/conf.d/${server}.conf <<-EOF
upstream ${server} { server ${route}; }
  server {
    server_name ${server};
    location / {
    proxy_pass  http://${server};
    proxy_http_version 1.1;
    proxy_set_header Upgrade \$http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host \$http_host;
    proxy_set_header X-Forwarded-Proto \$scheme;
    proxy_set_header X-Forwarded-For \$remote_addr;
    proxy_set_header X-Forwarded-Port \$server_port;
    proxy_set_header X-Request-Start \$msec;
  }
}
EOF

  # restart nginx
  docker restart nginx

 # add host to /etc/hosts
  hostess add $server 127.0.0.1

  # open browser
  open "http://${server}"
}

cadvisor(){
  docker run -d \
    --restart always \
    --volume /:/rootfs:ro \
    --volume /var/run:/var/run:rw \
    --volume /sys:/sys:ro  \
    --volume /var/lib/docker/:/var/lib/docker:ro \
    --publish 1234:8080 \
    --name cadvisor \
    google/cadvisor

  sudo hostess add cadvisor $(docker inspect --format "{{.NetworkSettings.Networks.bridge.IPAddress}}" cadvisor)
  open "http://cadvisor:8080"
}

consul(){
  del_stopped consul

  # check if we passed args and if consul is running
  local args=$@
  local state=$(docker inspect --format "{{.State.Running}}" consul 2>/dev/null)
  if [[ "$state" == "true" ]] && [[ ! -z "$args" ]]; then
    docker exec -it consul consul "$@"
    return 0
  fi

  docker run -d \
    --restart always \
    --volume $HOME/.consul:/etc/consul.d \
    --volume /var/run/docker.sock:/var/run/docker.sock \
    --net host \
    --env GOMAXPROCS=2 \
    --name consul \
    ${DOCKER_REPO_PREFIX}/consul agent \
    -bootstrap-expect 1 \
    -config-dir /etc/consul.d \
    -data-dir /data \
    -encrypt $(docker run --rm ${DOCKER_REPO_PREFIX}/consul keygen) \
    -ui-dir /usr/src/consul \
    -server \
    -dc neverland \
    -bind 0.0.0.0

  sudo hostess add consul $(docker inspect --format "{{.NetworkSettings.Networks.bridge.IPAddress}}" consul)
  open "http://consul:8500"
}

dcos(){
  docker run -it --rm \
    --volume $HOME/.dcos:/root/.dcos \
    --volume $(pwd):/root/apps \
    -w /root/apps \
    ${DOCKER_REPO_PREFIX}/dcos-cli "$@"
}

htopdocker(){
  docker run --rm -it \
    --pid host \
    --net none \
    --name htop \
    ${DOCKER_REPO_PREFIX}/htop
}

# http(){
#   docker run -t --rm \
#     --volume /var/run/docker.sock:/var/run/docker.sock \
#     --log-driver none \
#     alpine/httpie "$@"
# }

imagemin(){
  local image=$1
  local extension="${image##*.}"
  local filename="${image%.*}"

  docker run --rm -it \
    --volume /etc/localtime:/etc/localtime:ro \
    --volume $HOME/Documents:/root/Pictures \
    ${DOCKER_REPO_PREFIX}/imagemin sh -c "imagemin /root/Pictures/${image} > /root/Pictures/${filename}_min.${extension}"
}

irssi() {
  del_stopped irssi
  # relies_on notify_osd

  docker run --rm -it \
    --volume /etc/localtime:/etc/localtime:ro \
    --volume $HOME/.irssi:/home/user/.irssi \
    --read-only \
    --name irssi \
    ${DOCKER_REPO_PREFIX}/irssi
}

couchdb(){
  del_stopped couchdb
  local state=$(docker inspect --format "{{.State.Running}}" couchdb 2>/dev/null)

  if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
    echo "couchdb server is not running, starting it for you."
    local COUCH_DB_ADMIN=${1:-root}
    local COUCH_DB_PASS=${2:-nmrony}
    # create new couchdb container
    docker run -it -d \
      --volume ${DEV_ZONE}/storage/couchdb:/usr/local/var/lib/couchdb \
      --publish 5984:5984 \
      --publish 2049:2049 \
      --env COUCHDB_USER=${COUCH_DB_ADMIN} \
      --env COUCHDB_PASSWORD=${COUCH_DB_PASS} \
      --env VIRTUAL_HOST=couchdb.nmrony.localhost \
      --net ronsvpn \
      --name couchdb \
      couchdb 2>/dev/null
  else
    echo 'couchdb is already running'
  fi
}

mysqlserver8(){
  del_stopped mysqlserver
  local state=$(docker inspect --format "{{.State.Running}}" mysqlserver 2>/dev/null)

  if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
    echo "mysql 8.x server is not running, starting it for you."
    docker run -it -d \
      --volume ${DEV_ZONE}/storage/databases/mysql/8:/var/lib/mysql \
      --env MYSQL_ROOT_PASSWORD=nmrony \
      --publish 3306:3306 \
      --net ronsvpn \
      --name mysqlserver \
      mysql:8 2>/dev/null
  else
    echo 'mysql server is already running'
  fi
}

mysqlserver5(){
  del_stopped mysqlserver5
  local state=$(docker inspect --format "{{.State.Running}}" mysqlserver5 2>/dev/null)

  if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
    echo "mysql 5.x server is not running, starting it for you."
    docker run -it -d \
      --volume ${DEV_ZONE}/storage/databases/mysql/5:/var/lib/mysql \
      --env MYSQL_ROOT_PASSWORD=nmrony \
      --publish 3306:3306 \
      --net ronsvpn \
      --name mysqlserver5 \
      mysql:5.7 mysqld --wait-timeout=28800 2>/dev/null
  else
    echo 'mysql server is already running'
  fi
}

mysql8(){
  relies_on mysqlserver
  docker exec -it mysqlserver mysql "$@"
}

mysql5(){
  relies_on mysqlserver5
  docker exec -it mysqlserver5 mysql "$@"
}

dynamodb() {
  del_stopped dynamodb
  relies_on nginx_proxy
  sleep 2;
  local state=$(docker inspect --format "{{.State.Running}}" dynamodb 2>/dev/null)

    if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
      echo "local dynamodb server is not running, starting it for you."
      docker run -dit \
        --volume ${DEV_ZONE}/storage/databases/dynamodb:/home/dynamodblocal/data \
        --workdir /home/dynamodblocal \
        --publish "8000:8000" \
        --expose 8000 \
        --env VIRTUAL_HOST=dynamodb.nmrony.localhost \
        --net ronsvpn \
        --name dynamodb \
        amazon/dynamodb-local -jar DynamoDBLocal.jar -sharedDb -optimizeDbBeforeStartup -dbPath ./data 2>/dev/null
        if [ "$1" != "" ]; then
          docker network connect $1 dynamodb
        fi
        else
          echo 'local dynamodb server is already running'
        fi

}

pma() {
  del_stopped pma
  relies_on nginx_proxy
  sleep 2;
  local state=$(docker inspect --format "{{.State.Running}}" pma 2>/dev/null)

  if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
      echo "phpMyAdmin is not running, starting it for you."
      docker run -it -d \
        --env VIRTUAL_HOST=pma.nmrony.localhost \
        --env PMA_ARBITRARY=1 \
        --net ronsvpn \
        --expose 80 \
        --name pma \
        phpmyadmin/phpmyadmin > /dev/null 2>&1
    else
      echo 'phpMyAdmin is already running'
    fi
}

myblog(){
  relies_on nginx_proxy
  relies_on mysqlserver
  sleep 5
  del_stopped personal-blog
  local state=$(docker inspect --format "{{.State.Running}}" personal-blog 2>/dev/null)

  if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
    echo "blog server is not running, starting it for you."
    docker run -it -d \
      --volume ${DEV_ZONE}/projects/open-sources/nmrony.info/ghost-content:/var/lib/ghost/content \
      --env VIRTUAL_HOST=blog.nmrony.localhost \
      --env url=http://blog.nmrony.localhost \
      --env database__client=mysql \
      --env database__connection__host=mysqlserver \
      --env database__connection__user=root \
      --env database__connection__password=nmrony \
      --env database__connection__database=rons_blog \
      --env DEV_DOMAIN=http://blog.nmrony.localhost \
      --net ronsvpn \
      --name personal-blog \
      ghost:2-alpine 2>/dev/null
  else
    echo 'blog is already running'
  fi
}

mongodb(){
  del_stopped mongodb
  local state=$(docker inspect --format "{{.State.Running}}" mongodb 2>/dev/null)

  if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
    echo "mongodb server is not running, starting it for you."
    docker run -it -d \
      --volume ${DEV_ZONE}/storage/databases/mongodb:/data/db \
      --publish 27017:27017 \
      --net ronsvpn \
      --name mongodb \
      mongo "$@" 2>/dev/null
  else
    echo 'mongodb is already running'
  fi
}

mongo() {
  relies_on mongodb
  sleep 4s;
  docker exec -it mongodb mongo "$@"
}

postgresserver13() {
  del_stopped postgresserver13
  local state=$(docker inspect --format "{{.State.Running}}" postgresserver13 2>/dev/null)
  local VERSION=${2:-13-alpine}
  local DBNAME=${1:-experiments}

  if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
    echo "postgres 13.x.x server is not running, starting it for you."
    docker run -it -d \
      --net ronsvpn \
      --ulimit memlock=-1:-1 \
      --memory-swappiness=0 \
      --volume ${DEV_ZONE}/storage/databases/postgres/13:/var/lib/postgresql/data \
      --env POSTGRES_USER=postgres \
      --env POSTGRES_DB=$DBNAME \
      --env POSTGRES_PASSWORD=nmrony \
      --publish 5432:5432 \
      --name postgresserver13 \
      postgres:$VERSION
  else
    echo 'postgres 13.x.x is already running'
  fi
}

psql13() {
  relies_on postgresserver13;
  docker exec -it postgresserver13 psql "$@"
}

pga() {
  del_stopped pga
  relies_on nginx_proxy
  sleep 2;
  local state=$(docker inspect --format "{{.State.Running}}" pga 2>/dev/null)

  if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
      echo "pgAdmin4 is not running, starting it for you."
      docker run -dit \
        --env VIRTUAL_HOST=pga.nmrony.localhost \
        --env PGADMIN_DEFAULT_EMAIL=rony@nmrony.info \
        --env PGADMIN_DEFAULT_PASSWORD=nmrony \
        --env PGADMIN_DISABLE_POSTFIX=yes \
        --net ronsvpn \
        --expose 80 \
        --name pga \
        dpage/pgadmin4 > /dev/null 2>&1
    else
      echo 'pgAdmin4 is already running'
    fi
}

elasticsearch(){
  # Add these extra environment variables if needed
  # --env "bootstrap.memory_lock=true"
  # --env "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  del_stopped elasticsearch
  local state=$(docker inspect --format "{{.State.Running}}" elasticsearch 2>/dev/null)

  if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
    echo "elasticsearch server is not running, starting it for you."
    docker run -it -d \
      --volume ${DEV_ZONE}/storage/elasticsearch/data:/usr/share/elasticsearch/data \
      --publish 9200:9200 \
      --publish 9300:9300 \
      --net ronsvpn \
      --ulimit memlock=-1:-1 \
      --env "http.cors.enabled=true" \
      --env "ELASTIC_PASSWORD=nmrony" \
      --env "discovery.type=single-node" \
      --env "xpack.security.enabled=true" \
      --env "http.cors.allow-origin=/.*/" \
      --env "http.max_content_length=200mb" \
      --env "node.name=nmr-elasticsearch-node" \
      --env "cluster.name=nmr-elasticsearch-cluser" \
      --env "http.cors.allow-headers: X-Requested-With,Content-Type,Content-Length,Authorization" \
      --name elasticsearch \
      docker.elastic.co/elasticsearch/elasticsearch:7 "$@" 2>/dev/null
  else
    echo 'elasticsearch is already running'
  fi
}

elastic-gui() {
  del_stopped elastic-gui
  relies_on elasticsearch
  sleep 2;
  local state=$(docker inspect --format "{{.State.Running}}" elastic-gui 2>/dev/null)

  if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
    docker run -dit \
       --publish 9000:8080 \
       --env VIRTUAL_HOST=elasticgui.nmrony.localhost \
       --name elastic-gui \
       cars10/elasticvue
  else
    echo 'elasticsearch gui is already running'
  fi

}

containerssh() {
  docker exec -it "$@"
}

composer() {
  docker run --rm --interactive --tty \
    --volume $PWD:/app \
    --user $(id -u):$(id -g) \
    composer "$@"
}

apache-php() {
  docker run --rm --interactive --tty \
    --volume $PWD:/var/www/html \
    --user $(id -u):$(id -g) \
    --net ronsvpn \
    nmrony/php:7-apache "$@"
}

start-lamp-stack() {
  nginx_proxy && pma && mysqlserver && echo 'LAMP stack started successfully.'
}

stop-lamp-stack() {
  docker rm -f nginx_proxy pma mysqlserver && echo 'LAMP stack stopped successfully.'
}

sysdig() {
  del_stopped sysdig-container
  docker run -it \
    --name sysdig-container \
    --privileged \
    --volume /var/run/docker.sock:/host/var/run/docker.sock \
    --volume /dev:/host/dev \
    --volume /proc:/host/proc:ro \
    --volume /boot:/host/boot:ro \
    --volume /lib/modules:/host/lib/modules:ro \
    --volume /usr:/host/usr:ro \
    sysdig/sysdig
}

bees(){
  docker run -it --rm \
    --env NOTARY_TOKEN \
    --volume $HOME/.bees:/root/.bees \
    --volume $HOME/.boto:/root/.boto \
    --volume $HOME/.dev:/root/.ssh:ro \
    --log-driver none \
    --name bees \
    ${DOCKER_REPO_PREFIX}/beeswithmachineguns "$@"
}

###
### Awesome sauce by @jpetazzo
###
command_not_found_handle () {
 # Check if there is a container image with that name
 if ! docker inspect --format '{{ .Author }}' "$1" >&/dev/null ; then
  echo "$0: $1: command not found"
  return
 fi

 # Check that it's really the name of the image, not a prefix
 if docker inspect --format '{{ .Id }}' "$1" | grep -q "^$1" ; then
  echo "$0: $1: command not found"
  return
 fi

#  docker run -ti -u $(whoami) -w "$HOME" \
#   $(env | cut -d= -f1 | awk '{print "-e", $1}') \
#   --device /dev/snd \
#   --volume /etc/passwd:/etc/passwd:ro \
#   --volume /etc/group:/etc/group:ro \
#   --volume /etc/localtime:/etc/localtime:ro \
#   --volume /home:/home \
#   --volume /tmp/.X11-unix:/tmp/.X11-unix \
#   "${DOCKER_REPO_PREFIX}/$@"
}

dive() {
  del_stopped dive
  docker run --rm -it \
    --net ronsvpn \
    --name dive \
    --volume /var/run/docker.sock:/var/run/docker.sock:ro \
    wagoodman/dive:latest "$@"
}
