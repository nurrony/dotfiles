#!/usr/bin/env bash

function kctx() {
  kubectl-ctx "$1"
}

function kns() {
  kubectl-ns "$1"
}

function k8sdashboard() {
  local kdashuser=${1:-nurrony}
  kubectl --namespace kubernetes-dashboard create token "$kdashuser" | pbcopy | echo "=> K8s dashboard token copied to pasteboard for user $kdashuser."
  open https://localhost:8443/
  kubectl -n kubernetes-dashboard port-forward svc/kubernetes-dashboard-kong-proxy 8443:443
}

function k8sgui() {
  local context=${1:-k3d-devship}
  local http_port=${2:-9999}
  echo -e "==> Go to http://localhost:${http_port} \n\n"
  kube-explorer --https-listen-port=0 --http-listen-port="$http_port" --debug --context="$context"
}

# Kubernetes Devship Repo https://github.com/nurrony/devship
function saildevship() {
  # Check if jq is installed
  if ! command -v jq &>/dev/null; then
    echo "Error: 'jq' is required but not installed. Please install jq to continue."
    return
  fi
  if ! command -v k3d &>/dev/null; then
    echo "Error: 'k3d' is required but not installed. Please install k3d to continue."
    return
  fi

  # Get the list of clusters and skip header
  local clusters=$(k3d cluster list -o json)
  # Get running cluster list
  local running_cluster=$(echo "$clusters" | jq -r '.[] | select(.serversRunning > 0 or .agentsRunning > 0) | .name')

  if [[ -n "$running_cluster" ]]; then
    echo "A k3d cluster is already running: $running_cluster"
    return
  fi
  # Get list of stopped clusters
  local stopped_clusters=($(echo "$clusters" | jq -r '.[] | select(.serversRunning == 0 and .agentsRunning == 0) | .name'))

  if [[ ${#stopped_clusters[@]} -eq 0 ]]; then
    echo "No stopped clusters found either."
    read -p "Do you want to create a new k3d cluster? (y/n): " create_new
    if [[ "$create_new" == "y" ]]; then
      $DEV_ZONE/projects/open-sources/devship/devship
    fi
  else
    echo "Found stopped clusters:"
    select choice in "${stopped_clusters[@]}" "Create new cluster"; do
      if [[ "$choice" == "Create new cluster" ]]; then
        $DEV_ZONE/projects/open-sources/devship/devship
        break
      elif [[ -n "$choice" ]]; then
        echo "Starting cluster: $choice"
        k3d cluster start "$choice"
        break
      else
        echo "Invalid choice. Try again."
      fi
    done
  fi
}

# aliases
alias k8s="kubectl"
alias nukedevship='k3d cluster stop devship && k3d cluster delete devship && echo "\ndevship k8s cluster has been nuked"'
alias minikube-start='minikube start --cpus 2 --disk-size "50g" --memory 4096 --extra-config=apiserver.authorization-mode=RBAC --extra-config=apiserver.runtime-config=settings.k8s.io/v1alpha1=true'
alias minikube-reg='minikube start --insecure-registry localhost:5000'
