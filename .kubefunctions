#!/usr/bin/env bash

function kctx() {
  kubectl-ctx "$1"
}

function kns() {
  kubectl-ns "$1"
}

function k8sdashboard() {
  local kdashuser=${1:-rony}
  kubectl --namespace kubernetes-dashboard create token "$kdashuser" | pbcopy | echo "=> K8s dashboard token copied to pasteboard for user $kdashuser."
  echo "=> http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/"
  kubectl proxy
}

function k8sgui() {
  local context=${1:-k3d-devship}
  local http_port=${2:-9999}
  echo -e "==> Go to http://localhost:${http_port} \n\n"
  kube-explorer --https-listen-port=0 --http-listen-port="$http_port" --debug --context="$context"
}

function saildevship() {
  # Kubernetes Devship Repo https://github.com/nurrony/devship
  CLUSTER_VOLUME_HOST_PATH=$DEV_ZONE/storage/kubernetes/clusters/volumes/devship \
  LOCAL_REGISTRY_VOL_HOSTPATH=$DEV_ZONE/storage/kubernetes/clusters/volumes/registry \
  $DEV_ZONE/projects/open-sources/devship/kubecluster
}

# aliases
alias k8s="kubectl"
alias nukedevship='k3d cluster stop devship && k3d cluster delete devship && echo "\ndevship k8s cluster has been nuked"'

# minikube alias
alias minikube-start='minikube start --cpus 2 --disk-size "50g" --memory 4096 --extra-config=apiserver.authorization-mode=RBAC --extra-config=apiserver.runtime-config=settings.k8s.io/v1alpha1=true'
alias minikube-reg='minikube start --insecure-registry localhost:5000'
